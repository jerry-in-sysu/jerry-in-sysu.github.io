{"meta":{"title":"Jerry's Blog","subtitle":"","description":"欢迎访问jerry的博客","author":"Jerry","url":"https://jerry-in-sysu.github.io","root":"/"},"pages":[{"title":"我的朋友们","date":"2025-02-10T15:54:22.443Z","updated":"2025-02-10T15:54:22.443Z","comments":true,"path":"friends/index.html","permalink":"https://jerry-in-sysu.github.io/friends/index.html","excerpt":"这里各各都是大佬！","text":"这里各各都是大佬！"},{"title":"所有分类","date":"2025-02-10T08:57:38.976Z","updated":"2025-02-10T08:57:38.976Z","comments":true,"path":"categories/index.html","permalink":"https://jerry-in-sysu.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2025-02-10T12:41:09.735Z","updated":"2025-02-10T12:41:09.735Z","comments":true,"path":"about/index.html","permalink":"https://jerry-in-sysu.github.io/about/index.html","excerpt":"","text":"本人是一名就读于中山大学计算机学院保密管理专业的学生，做这个博客就是想要记录和分享自己在生活中感兴趣的事以及记录下自己的学习过程，希望我们大家一起进步！"},{"title":"所有标签","date":"2025-02-10T08:58:21.393Z","updated":"2025-02-10T08:58:21.393Z","comments":true,"path":"tags/index.html","permalink":"https://jerry-in-sysu.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Django学习笔记二","slug":"Django学习笔记二","date":"2025-02-11T09:07:08.000Z","updated":"2025-02-12T12:39:28.818Z","comments":true,"path":"2025/02/11/Django学习笔记二/","permalink":"https://jerry-in-sysu.github.io/2025/02/11/Django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/","excerpt":"这部分主要是关于Django中ORM是如何操作数据库中的表。","text":"这部分主要是关于Django中ORM是如何操作数据库中的表。 1、ORM链接数据库我们在python中可以使用很多方法来操作我们的数据库，比如可以使用pymysql；但是我们正在使用Django来完成我们的任务，而这里面准备了一个ORM框架（可以理解为解释器，可以将我们的python代码转换为mysql代码，这样就不需要我们在写一大堆mysql语句了） 首先，我们先下载 mysqlclient库，因为对于新版的Django框架而言，这个库会比 pymysql更加适用。 我们需要注意，虽然ORM可以操作数据库中的表，但是其不能对数据库进行操作 所以，我们需要先在本地创建一个库，然后在 settings.py文件中进行配置 12345678910DATABASES = &#123; &#x27;default&#x27;:&#123; &#x27;ENGINE&#x27;: &#x27;django.db.backends.mysql&#x27;, #默认链接mysql数据库 &#x27;NAME&#x27;: &#x27;xxx&#x27;, #数据库名 &#x27;USER&#x27;: &#x27;root&#x27;, #用户名 &#x27;PASSWORD&#x27;: &quot;xxx&quot;, #自己设置的密码 &#x27;HOST&#x27;: &#x27;localhost&#x27;, # 一般数据库位于本地 &#x27;PORT&#x27;: &#x27;3306&#x27;, # 数据库使用端口 &#125;&#125; 通过以上的步骤，我们就成功连接数据库了。 2、ORM创建表操作 为了创建我们的表格，我们需要到 models.py中写对应的python代码 12345# Create your models here.class UserInfo(models.Model): # 类继承，必须要写 name = models.CharField(max_length=32) password = models.CharField(max_length=64) age = models.IntegerField() 以上的python语句会被ORM翻译成如下的mysql语句： 123456create table app01_userinfo( id bigint auto_increment primary key, # 系统自动添加上 name varchar(32), password varchar(64), age int) 需要注意的是：建表行为必须要此app之前在 settings.py中注册过才能生效 完成了以上步骤之后，我们还需要执行以下两条指令才可以将此处的表格添加到数据库中 12python manage.py makemigrationspython manage.py migrate 还需注意的是，在执行这两条命令时，需要位于项目的根目录下，不然是找不到 manage.py文件的。 这样一切就大功告成了，我们便可以在本地数据库软件中查看到对应添加的表。 3、ORM修改表结构在上文我们已经介绍了如何创建表格，那么如果当你想新添加表时，就同样执行那两条python命令就可以了，而如果想要删除掉某个表或者某个元素，只需要注释掉再执行python命令即可。但是当你想要新增加表中的元素时，考虑到原来表中其他元素存在对应值，所以新增加的元素这列的值需要你来决定，以下是几种决定方式： 手动输入特定值 添加默认值： 123age = models.IntegerField(default=2)# 或者允许该值为空值age = models.IntegerField(blank = True,null = True) 接下来，我们将要学习如何使用对应的语句来对表中数据进行修改： 添加操作为了在表中添加一条记录，我们可以使用以下语句： 123表名.objects.create(填入表结构对应的属性值)# exampleUserInfo.objects.create(name = &#x27;Jerry&#x27;,password = &#x27;123456&#x27;,age = 18) 删除操作为了在表中删除对应的记录，回想我们在数据库中学到的知识，我们要删除记录就必须要筛选到那一条记录，所以使用以下的语句： 1234表名.objects.filter(筛选条件).delete() # exampleUserInfo.objects.filter(id=1).delete()UserInfo.objects.all().delete() #删除掉所有元组 获取数据我们在使用Django时免不了要查看数据库中的数据，那么就可以使用以下的语句： 123变量名 = 表名.objects.all()/filter()# exampledata_list = UserInfo.objects.all() note warning 注意：当我们执行查询时返回的数据类型为queryset类型，而每个表中元组作为对象在返回的数据类型中，可以理解为返回数据为list，而表中每行都是其中的一个元素 为此，我们可以这样访问： 123# examplefor obj in data_list: print(obj.id, obj.name, obj.password, obj.age) 我们还需要注意即使是添加了筛选条件返回的数据类型也是queryset类型，所以还是要用列表的形式来访问： 12# exampledata_list = UserInfo.objects.filter(name=&#x27;Jerry&#x27;) 但是，当我们添加更多的条件时，就会直接筛选出对应的对象。此时，我们可以看到添加了.first()的条件后，就是默认取出列表中的第一个对象，这样便可以直接访问，而不需要使用列表的形式访问。 123# examplerow_object = UserInfo.objects.filter(name=&#x27;Jerry&#x27;).first()print(row_object.id, row_object.name, row_object.password, row_object.age) 更新数据到目前为止，表操作只剩下了更新数据，而该语法也与上面的的大同小异： 123表名.objects.筛选条件.update(更新项目)# exampleUserInfo.objects.all().update(age=18)","categories":[{"name":"Django学习","slug":"Django学习","permalink":"https://jerry-in-sysu.github.io/categories/Django%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Django开发学习","slug":"Django开发学习","permalink":"https://jerry-in-sysu.github.io/tags/Django%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/"}]},{"title":"Django学习笔记一","slug":"django学习笔记1","date":"2025-02-09T04:13:06.000Z","updated":"2025-02-10T10:26:19.848Z","comments":true,"path":"2025/02/09/django学习笔记1/","permalink":"https://jerry-in-sysu.github.io/2025/02/09/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/","excerpt":"这里是我学习Django的笔记！","text":"这里是我学习Django的笔记！ 1.项目创建当我们将python文件夹中的scripts目录放进我们系统的环境变量时，我们在终端使用以下命令来创建Django项目： 1django-admin startproject project_name 启动完对应项目后，这个启动程序会为我们初始化项目中所包含的文件： 1234567├── manage.py 【一般用于项目管理、启动项目、创建app、数据管理】【不用修改】【常用】└── test1 ├── __init__.py ├── settings.py 【项目配置文件（可以用于链接数据库……）】【常常修改】 ├── urls.py 【URL和函数的对应关系】【常常修改】 ├── asgi.py 【接收网络请求（异步）】【不用修改】 └── wsgi.py 【接收网络请求（同步）】【不用修改】 生成app（这个并不是手机上的应用，而是用于管理项目的一部分）：可是创建多个app来管理项目的特定部分，但是用于一般开发而言，我们一般仅仅使用一个来管理就足够了。 1python manage.py startapp app_name 通过以上指令就可以生成一个app了，其中结构如下： 123456789├── app01| ├── __init__.py| ├── admin.py 【固定，不用动】django默认提供后台管理| ├── apps.py 【固定，不用动】app启动类| ├── migrations 【固定，不用动】数据库变更记录| | └── __init__.py| ├── models.py 【重要】对数据库进行操作| ├── tests.py 【固定，不用动】单元测试| ├── views.py 【重要】函数 2.项目启动首先，我们刚刚创建了一个app，然后我们现在需要对其进行注册，这样才可以使用它（setting.py）： .vbzsyalnpvud{} 对应添加的名称可以到对应的app文件夹中的 apps.py文件中去查看： .yxeerioyomiz{} 其次，我们需要到 urls.py文件中去编写对应的响应函数： 1234567from django.contrib import adminfrom django.urls import pathfrom app01 import views # 引用app中编写好的函数urlpatterns = [ #path(&#x27;admin/&#x27;, admin.site.urls), path(&#x27;index/&#x27;,views.index), # 前面的一部分是路径，而后面一部分就是对应的函数] 紧接着，我们再到 views.py文件中去完善响应函数的内容： 12345from django.shortcuts import renderfrom django.http import HttpResponse# Create your views here.def index(request): # 其中，request是默认参数，然后就实现了一个简单函数 return HttpResponse(&quot;欢迎使用&quot;) 最后，我们在终端中使用如下命令便可以启动服务： 1python manage.py runserver 经过以上操作，我们便完成了一个项目的启动。","categories":[{"name":"Django学习","slug":"Django学习","permalink":"https://jerry-in-sysu.github.io/categories/Django%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Django开发学习","slug":"Django开发学习","permalink":"https://jerry-in-sysu.github.io/tags/Django%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/"}]},{"title":"学习资料","slug":"学习资料","date":"2025-02-09T04:13:06.000Z","updated":"2025-02-10T09:10:05.445Z","comments":true,"path":"2025/02/09/学习资料/","permalink":"https://jerry-in-sysu.github.io/2025/02/09/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/","excerpt":"我为保密管理专业的uu们准备的学习资料大全，快看这里！（当然其他uu也是欢迎参观🤗）","text":"我为保密管理专业的uu们准备的学习资料大全，快看这里！（当然其他uu也是欢迎参观🤗） 同样是保密管理专业的uu们，你们好呀！在大三的寒假里，我利用空闲时间整理了我上大学至今的所有资料供大家参考，里面有许多一手的复习资料，相信能够对大家在复习时产生较大的帮助。那就有人会问了：那我要怎么去找到对应的仓库呢？这里一共有两种方法： 第一，大家可以点击我博客中的“源码”就可以直接跳转到我的github仓库。 第二，大家也可以直接在github中搜索“保密管理”这个关键词，然后筛选的时候选择时间较近更新的就可以看到我的仓库啦！ .tukmldmveuoz{}","categories":[],"tags":[{"name":"复习","slug":"复习","permalink":"https://jerry-in-sysu.github.io/tags/%E5%A4%8D%E4%B9%A0/"}]},{"title":"Hello World","slug":"hello-world","date":"2025-02-08T06:24:12.082Z","updated":"2025-02-10T15:56:19.075Z","comments":true,"path":"2025/02/08/hello-world/","permalink":"https://jerry-in-sysu.github.io/2025/02/08/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment 带 下划线 的文本；带 着重号 的文本；带 波浪线 的文本；带 删除线 的文本 键盘样式的文本：⌘ + D 密码样式的文本：这里没有验证码","categories":[],"tags":[]}],"categories":[{"name":"Django学习","slug":"Django学习","permalink":"https://jerry-in-sysu.github.io/categories/Django%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Django开发学习","slug":"Django开发学习","permalink":"https://jerry-in-sysu.github.io/tags/Django%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/"},{"name":"复习","slug":"复习","permalink":"https://jerry-in-sysu.github.io/tags/%E5%A4%8D%E4%B9%A0/"}]}